################################################################################
#    This file is part of the MagiCBuild configuration and build system.       #
#                                                                              #
#    Copyright (C) 2003 Marko Grönroos <magi@iki.fi>                           #
#                                                                              #
################################################################################
#                                                                              #
#   This library is free software; you can redistribute it and/or              #
#   modify it under the terms of the GNU Library General Public                #
#   License as published by the Free Software Foundation; either               #
#   version 2 of the License, or (at your option) any later version.           #
#                                                                              #
#   This library is distributed in the hope that it will be useful,            #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU          #
#   Library General Public License for more details.                           #
#                                                                              #
#   You should have received a copy of the GNU Library General Public          #
#   License along with this library; see the file COPYING.LIB.  If             #
#   not, write to the Free Software Foundation, Inc., 59 Temple Place          #
#   - Suite 330, Boston, MA 02111-1307, USA.                                   #
#                                                                              #
################################################################################

################################################################################
# Invoke recursive make rules
################################################################################

# We read the common makefile for recursive makefiles. All recursion
# is handled in magictop.mk, which calls specific rules defined in this file.
# The __magiccmp__ needs to be defined as magictop needs to know
# that certain rules will be defined here.
__magiccmp__ = 1
include $(SRCDIR)/build/magictop.mk

################################################################################
# This file defines the MagiClib build framework for GNU Make
################################################################################

ifndef sources
compile-all:
	@echo "ERROR. Variable 'sources' not defined for build framework."
else

################################################################################
# Define target names
################################################################################

# Target binary to compile
ifdef compile_library
modtargetbin = $(libdir)/$(modtarget).a
else
modtargetbin = $(bindir)/$(modtarget)
endif

################################################################################
# Define source and object names
################################################################################

# Source files of the module
modsrcs_full = $(foreach file,$(sources),$(modsrcdir)/$(file))

# Object files of the module, compiled from source files
modobjs_full = $(subst .cc,.o,$(foreach file,$(sources),$(objmoddir)/$(file)))

# List of Qt MOC objects, if defined.
mocobjs_full = $(subst .h,_moc.o,$(foreach file,$(qtheaders),$(objmoddir)/$(file)))

# Compilable libraries this module depends on
libdeps_full = $(foreach lib,$(libdeps),$(libdir)/lib$(lib).a)
libdeps_l    = $(foreach lib,$(libdeps),-l$(lib))

################################################################################
# Build rules
################################################################################

# Compilation main target
compile-all: mkdir-all build-all copy-headers copy-configfiles copy-datafiles

# Determine proper compiler flags
ifeq ($(CXX),gcc)
CXXFLAGS += -x c++
STDLIBS   ?= -L$(CXX_PATH) -lstdc++ -lgcc
endif
LD_CXX ?= $(CXX)

# Top build rule
build-all: $(modtargetbin)
	@echo "Done"

################################################################################
# Rules for compiling various object types
################################################################################
# Compile object files from C++ source files
$(objmoddir)/%.o: $(modsrcdir)/%.cc
	$(CXX) $(CXXFLAGS) $(DEBUGFLAGS) -c -o $@ $< -I$(modincdir) -I$(grpincdir) -I$(incdir) -I$(uimoddir) $(qt_includes) $(EXTRA_INCLUDE_DIRS)

# Compile object files from source files generated by the UI Compiler
$(uimoddir)/%.o: $(uimoddir)/%.cc
	$(CXX) $(CXXFLAGS) $(DEBUGFLAGS) -c -o $@ $< -I$(modincdir) -I$(grpincdir) -I$(incdir) -I$(uimoddir) $(qt_includes) $(EXTRA_INCLUDE_DIRS)

# Compile UI extensions
#$(uimoddir)/%.ui.o: $(moduidir)/%.ui.h
#	$(CXX) $(CXXFLAGS) $(DEBUGFLAGS) -c -o $@ $< -I$(modincdir) -I$(grpincdir) -I$(incdir) -I$(uimoddir) $(qt_includes) $(EXTRA_INCLUDE_DIRS)

# Compile extra object files from extra C++ source files
$(xsrcmoddir)/%.o: $(xsrcmoddir)/%.cc
	$(CXX) $(CXXFLAGS) $(DEBUGFLAGS) -c -o $@ $< -I$(modincdir) -I$(grpincdir) -I$(incdir) $(EXTRA_INCLUDE_DIRS)

################################################################################
# Rules for compiling targets
################################################################################
ifdef compile_library
$(modtargetbin): $(modobjs_full) $(mocobjs_full)
	ar rc $@ $^
else
# Ordinary binary target
$(modtargetbin): $(modobjs_full) $(mocobjs_full) $(extra_objs) $(libdeps_full) $(uiobjects_full) $(uimocobjs_full)
	$(LD_CXX) $(LDFLAGS) -o $@ $(modobjs_full) $(mocobjs_full) $(uiobjects_full) $(uimocobjs_full) $(extra_objs) -L$(libdir) $(libdeps_l) $(EXTRA_LIB_DIRS) $(EXTRA_LIBS) $(STDLIBS) $(qt_linking)
endif

################################################################################
# Run MOC for Qt headers
################################################################################
# Compile with MOC
$(mocmoddir)/%_moc.cc: $(modincdir)/%.h	
	$(MOC) -o $@ $<

# Compile the C++ MOC sources to objects
$(objmoddir)/%_moc.o: $(mocmoddir)/%_moc.cc
	g++ $(CFLAGS) -c -o $@ $< -I$(modincdir) -I$(grpincdir) -I$(incdir) $(EXTRA_INCLUDE_DIRS)

################################################################################
# Copy headers
################################################################################

# Append
ifdef headersubdir
ifdef shared_headers
install_headers = $(foreach header,$(shared_headers),$(headersubdir)/$(header))
else
install_headers = $(foreach header,$(headers),$(headersubdir)/$(header))
endif
else
install_headers = $(headers)
endif

# Headers with their full source path
ifdef shared_headers
headers_full        = $(foreach header,$(install_headers),$(grpincdir)/$(header))
else
headers_full        = $(foreach header,$(install_headers),$(modincdir)/$(header))
endif

# Headers with their full target path
header_targets_full = $(foreach header,$(install_headers),$(incdir)/$(header))

copy-headers: make-incdir $(header_targets_full)
	@echo "Copied headers"

# Make header directory, if the headers are placed in a subdirectory
ifdef headersubdir
make-incdir: $(incdir)/$(headersubdir)

$(incdir)/$(headersubdir):
	mkdir -p $(incdir)/$(headersubdir)
else
make-incdir:
endif

# Copy shared headers
$(incdir)/%.h: $(grpincdir)/%.h
	cp $< $@

# Copy module headers
$(incdir)/%.h: $(modincdir)/%.h
	cp $< $@

################################################################################
# Copy configuration files
################################################################################

ifdef configfiles
configfiles_full = $(foreach file,$(configfiles),$(cfgmoddir)/$(file))

copy-configfiles: make-configdir $(configfiles_full)

make-configdir:
	mkdir -p $(cfgmoddir)

$(cfgmoddir)/%: $(modcfgdir)/%
	cp $< $@
else
copy-configfiles:
endif

################################################################################
# Copy data files
################################################################################

ifdef datafiles
datafiles_full = $(foreach file,$(datafiles),$(datamoddir)/$(file))

copy-datafiles: make-datadir $(datafiles_full)

make-datadir:
	mkdir -p $(datamoddir)

$(datamoddir)/%: $(moddatadir)/%
	cp $< $@
else
copy-datafiles:
endif

################################################################################
# Make dependencies
################################################################################
depdir       = $(outputdir)/deps
gccinstdir   = $(shell gcc -print-search-dirs|grep install|cut -f 2 -d ' ')

# Makedepend needs various include directories. Hope this is enough.
depincludes  = -I$(modincdir) -I$(grpincdir) -I$(incdir) 
depincludes += -I/usr/include/g++-3 -I/usr/include/g++-2 -I$(gccinstdir)include

# Check if the dependencies have already been made
depsexist := $(shell ls $(depdir)/$(modtarget)-deps.mk)

ifdef depsexist
# Include dependencies made with 'make deps'
include $(depdir)/$(modtarget)-deps.mk
endif

make-deps:
	mkdir -p $(depdir)
	touch $(depdir)/$(modtarget)-deps-2.mk
	makedepend -f $(depdir)/$(modtarget)-deps-2.mk $(modsrcs_full) $(depincludes)
	sed -e "s!$(modsrcdir)!$(objmoddir)!" <$(depdir)/$(modtarget)-deps-2.mk >$(depdir)/$(modtarget)-deps.mk
	rm -f $(depdir)/$(modtarget)-deps-2.mk $(depdir)/$(modtarget)-deps-2.mk.bak

################################################################################
# Make source documentation
################################################################################
export MODDIR      = $(moddir)
export GRPBUILDDIR = $(grpbuilddir)
export DOCMODDIR   = $(docmoddir)
doxygen_conf  = $(MODDIR)/build/dox.conf

ifdef makedox
make-dox: 
	cd $(moddocdir) && doxygen $(doxygen_conf)
endif

################################################################################
# Install
################################################################################
mansection         ?= 3
# TODO: This should store the list of man files!
manfiles           =  $(shell if [ `eval ls $(moddocdir)/man/man$(mansection) >&/dev/null` ]; then echo "yes"; fi)
generated_manfiles =  $(foreach manfile,$(manfiles),$(moddocdir)/man/man$(mansection)/$(manfile))
installed_manfiles =  $(foreach manfile,$(manfiles),$(INSTALLDIR)/man/man$(mansection)/$(manfile))

ifdef makedox
make-install: $(installed_manfiles)
else
make-install:
endif

$(INSTALLDIR)/man/man$(mansection)/%.$(mansection): $(moddocdir)/man/man$(mansection)/%.$(mansection)
	cp $< $@

################################################################################
# Uninstall
################################################################################
make-uninstall:
	rm -f $(installed_manfiles)

################################################################################
# Create output directories
################################################################################
mkdir-all:	$(outputdir) \
		$(bindir) \
		$(libdir) \
		$(incdir) \
		$(sharedir) \
		$(objdir) \
		$(mocdir) \
		$(docdir) \
		$(tmpdir) \
		$(objmoddir) \
		$(docmoddir) \
		$(mocmoddir)

$(outputdir):
	mkdir -p $(outputdir)

$(libdir):
	mkdir -p $(libdir)

$(bindir):
	mkdir -p $(bindir)

$(incdir):
	mkdir -p $(incdir)

$(sharedir):
	mkdir -p $(sharedir)

$(objdir):
	mkdir -p $(objdir)

$(mocdir):
ifdef qtheaders
	mkdir -p $(mocdir)
endif

$(docdir):
	mkdir -p $(docdir)

$(tmpdir):
	mkdir -p $(tmpdir)

$(objmoddir):
	mkdir -p $(objmoddir)

$(docmoddir):
	mkdir -p $(docmoddir)

$(mocmoddir):
ifdef qtheaders
	mkdir -p $(mocmoddir)
endif

################################################################################
# Clean
################################################################################
make-clean: clean-files clean-dirs

# Clean output files
clean-files:
	rm -f $(stlibs) $(shlibs) $(modobjs_full) $(header_targets_full) \
		$(datafiles_full) $(configfiles_full)
	rm -f $(modtargetbin)
	rm -f $(depdir)/$(modtarget)-deps.mk

# Clean output directories
clean-dirs:
	@-rmdir $(libdir) $(bindir)
ifdef headersubdir
	@-rmdir $(incdir)/$(headersubdir)
endif
	@-rmdir $(docmoddir) $(docdir) $(objmoddir) $(objdir)
	@-rmdir $(datamoddir) $(cfgmoddir) $(sharemoddir)
ifdef qtheaders
	@-rmdir $(mocmoddir) $(mocdir)
endif
	@-rmdir $(tmpdir) $(sharedir)/apps $(sharedir)
	@-rmdir $(incdir) $(depdir)
	@-rmdir $(outputdir) $(archdir)

################################################################################
# Rebuild
################################################################################
rebuild: clean all

################################################################################
# Version info
################################################################################
include $(SRCDIR)/build/magicver.mk

endif # ifdef sources
